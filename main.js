const { App } = require("@slack/bolt");
const OpenAI = require("openai");
const schedule = require("node-schedule");

require("dotenv").config();

// ÌïúÍµ≠ ÏãúÍ∞ÑÎåÄ ÏÑ§Ï†ï
process.env.TZ = "Asia/Seoul";

// ÏÇ¨Ïö©Ïûê ÌîÑÎ°úÌïÑ Î∞è Ïö¥ÏÑ∏ Ï∫êÏã±
const userProfileCache = new Map(); // { userId: profile }
const horoscopeCache = new Map(); // { "userId:YYYY-MM-DD": horoscope }
const sentMessagesToday = new Set(); // Î©îÏãúÏßÄ Î∞úÏÜ° Ï∫êÏãú

// Slack App ÏÑ§Ï†ï
const app = new App({
  token: process.env.SLACK_BOT_TOKEN,
  signingSecret: process.env.SLACK_SIGNING_SECRET,
  socketMode: true,
  appToken: process.env.SLACK_APP_TOKEN,
  port: process.env.PORT || 3000,
});

// OpenAI ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ Ï¥àÍ∏∞Ìôî
const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
});

// ÏÇ¨Ïö©Ïûê ÌîÑÎ°úÌïÑ Í∞ÄÏ†∏Ïò§Í∏∞ Ìï®Ïàò
async function getUserProfile(userId, client) {
  if (userProfileCache.has(userId)) {
    return userProfileCache.get(userId);
  }

  try {
    const { profile } = await client.users.profile.get({ user: userId });

    console.log(
      `\n1Ô∏è‚É£ ${profile.real_name} / ${JSON.stringify(profile.fields, null, 2)}`
    );
    console.log("Fetched user profile:", JSON.stringify(profile, null, 2));

    userProfileCache.set(userId, profile); // Ï∫êÏã±

    return profile;
  } catch (error) {
    console.error("Error fetching user profile:", error);
    return null;
  }
}

// OpenAI APIÎ°ú Ïö¥ÏÑ∏ Í∞ÄÏ†∏Ïò§Í∏∞ Ìï®Ïàò
async function getHoroscope(userId, birthdate) {
  const today = new Date();
  const formattedDate = `${today.getFullYear()}-${
    today.getMonth() + 1
  }-${today.getDate()}`;
  const cacheKey = `${userId}:${formattedDate}`;

  if (horoscopeCache.has(cacheKey)) {
    console.log(`Cache hit for horoscope: ${cacheKey}`);
    return horoscopeCache.get(cacheKey);
  }

  try {
    const response = await openai.chat.completions.create({
      model: "gpt-4",
      messages: [
        {
          role: "system",
          content: `ÎÑàÎäî 'Ïö¥ÏÑ∏Î•º Î≥¥Îäî Ï†êÏüÅÏù¥'Ïïº.
            ÌäπÌûà ÏÇ¨ÎûåÎì§Ïùò ÏÉùÎÖÑÏõîÏùºÏùÑ Í∏∞Î∞òÏúºÎ°ú Ïò§ÎäòÏùò Ïö¥ÏÑ∏Î•º Î¥êÏ£ºÎäî Ï†ÑÎ¨∏Í∞ÄÏïº.
            ÎÑàÏùò Ïó≠Ìï†ÏùÄ ÏßÅÏû•Ïù∏ÏùÑ ÏúÑÌïú ÏπúÏ†àÌïòÍ≥† Í∏çÏ†ïÏ†ÅÏù∏ Ïò§ÎäòÏùò Ïö¥ÏÑ∏Î•º Îã§ÏÑØ Î¨∏Ïû•ÏúºÎ°ú Ï†úÍ≥µÌïòÎäî Í±∞Ïïº.
            Ïö¥ÏÑ∏Îäî ÏïÑÏπ®Ïóê ÏßÅÏû• ÎèôÎ£åÏóêÍ≤å Î≥¥ÎÇ¥Îäî ÎÇ¥Ïö©Ï≤òÎüº ÏûëÏÑ±Ìï¥.
            Ï≤´ Î¨∏Ïû•ÏóêÏÑúÎäî Ïù∏ÏÇ¨Î•º ÏÉùÎûµÌïòÍ≥† Î∞îÎ°ú Ïö¥ÏÑ∏Î•º ÏãúÏûëÌï¥Ïïº Ìï¥.
            ÎßàÏßÄÎßâ Î¨∏Ïû•ÏóêÎäî Î∂ÄÎìúÎü¨Ïö¥ Ïñ¥Ï°∞Î•º ÏúÑÌï¥ ÎÇ¥Ïö©Í≥º Ïñ¥Ïö∏Î¶¨Îäî Ïù¥Î™®Ìã∞ÏΩò 2Í∞úÎ•º Ï∂îÍ∞ÄÌï¥.
            Î≥ÑÏûêÎ¶¨Ïóê ÎåÄÌïú Ïñ∏Í∏âÏùÄ ÌïòÏßÄ Îßà.
            Í∑∏Î¶¨Í≥† ÏöîÏùºÏóê ÎåÄÌïú Ïñ∏Í∏âÎèÑ ÌïòÏßÄ Îßà.`,
        },
        {
          role: "user",
          content: `Ïò§Îäò ÎÇ†ÏßúÎäî ${formattedDate}ÏûÖÎãàÎã§.
            ÏÇ¨Ïö©Ïûê ÏÉùÎÖÑÏõîÏùºÏùÄ ${birthdate}ÏûÖÎãàÎã§.
            ÏßÅÏû•Ïù∏ÏùÑ ÏúÑÌïú ÏπúÏ†àÌïòÍ≥† Í∏çÏ†ïÏ†ÅÏù∏ Ïö¥ÏÑ∏Î•º ÏïåÎ†§Ï§ò.`,
        },
      ],
      max_tokens: 300,
    });

    let horoscope = response.choices[0].message.content.trim();
    horoscopeCache.set(cacheKey, horoscope);
    console.log(`2Ô∏è‚É£ ${horoscope}\n(${new Date()})\n`);
    return horoscope;
  } catch (error) {
    console.error("Error fetching horoscope from OpenAI:", error);
    return null;
  }
}

// Ïö¥ÏÑ∏ Î©îÏãúÏßÄ Î∞úÏÜ° Ìï®Ïàò
async function sendDailyHoroscopeToUser(userId, client) {
  const userProfile = await getUserProfile(userId, client);

  // ÏÉùÏùº ÌôïÏù∏ Î∞è ÌïÑÌÑ∞ÎßÅ
  const fields = userProfile?.fields || {};

  const birthdate = fields[BIRTHDATE_FIELD_KEY]?.value || null;

  // ÏÉùÎÖÑÏõîÏùº ÎØ∏ÏûÖÎ†•Ïãú Î©îÏãúÏßÄ Î∞úÏÜ° ÏïàÌï®
  if (!birthdate) {
    return;
  }

  // ÏòàÏô∏ Ï≤òÎ¶¨ ÏÇ¨Ïö©Ïûê Î™ÖÎã®
  if (EXCEPTION_USER_LIST.includes(userProfile.real_name)) {
    return;
  }

  const horoscope = await getHoroscope(userId, birthdate);

  if (horoscope) {
    const formattedHoroscope = horoscope
      .split("\n")
      .map((line) => `> ${line}`)
      .join("\n");

    await client.chat.postMessage({
      channel: userId,
      blocks: [
        {
          type: "section",
          text: {
            type: "mrkdwn",
            text: `*<@${userId}>Îãò, Ïò§ÎäòÏùò Ïö¥ÏÑ∏Î•º ÏïåÎ†§ÎìúÎ¶ΩÎãàÎã§ üßôü™Ñ*\n\n`,
          },
        },
        {
          type: "section",
          text: {
            type: "mrkdwn",
            text: `üîÆ *Ïò§ÎäòÏùò Ïö¥ÏÑ∏:*\n${formattedHoroscope}`,
          },
        },
        {
          type: "divider",
        },
      ],
      text: "Ïò§ÎäòÏùò Ïö¥ÏÑ∏Î•º ÏïåÎ†§ÎìúÎ¶ΩÎãàÎã§!",
    });
  } else {
    await client.chat.postMessage({
      channel: userId,
      text: "Ïö¥ÏÑ∏Î•º Í∞ÄÏ†∏Ïò§ÏßÄ Î™ªÌñàÏäµÎãàÎã§. Îã§Ïãú ÏãúÎèÑÌï¥Ï£ºÏÑ∏Ïöî.",
    });
  }
}

// Î™®Îì† ÏÇ¨Ïö©Ïûê Í∞ÄÏ†∏Ïò§Í∏∞ Ìï®Ïàò (ÌéòÏù¥ÏßÄÎÑ§Ïù¥ÏÖò Ìè¨Ìï®)
async function getAllUsers(client) {
  let users = [];
  let cursor = undefined;

  do {
    const result = await client.users.list({
      cursor: cursor,
      limit: 500,
    });

    if (result.members) {
      users = users.concat(
        result.members.filter(({ is_bot, deleted }) => !is_bot && !deleted)
      );
    }

    cursor = result.response_metadata && result.response_metadata.next_cursor;
  } while (cursor);

  return users;
}

// Ï†ïÏãù Ïä§ÏºÄÏ§ÑÎßÅ (Îß§Ï£º ÏõîÏöîÏùºÎ∂ÄÌÑ∞ Í∏àÏöîÏùº ÌäπÏ†ï ÏãúÍ∞Ñ)
function scheduleDailyMessage() {
  schedule.scheduleJob(
    { hour: 10, minute: 30, dayOfWeek: new schedule.Range(1, 5) },
    async () => {
      try {
        const users = await getAllUsers(app.client);

        const today = new Date();
        const todayStr = `${today.getFullYear()}-${
          today.getMonth() + 1
        }-${today.getDate()}`;

        if (!sentMessagesToday.has(todayStr)) {
          sentMessagesToday.clear();
          sentMessagesToday.add(todayStr);
        }

        for (const user of users) {
          const cacheKey = `${user.id}:${todayStr}`;

          if (!sentMessagesToday.has(cacheKey)) {
            await sendDailyHoroscopeToUser(user.id, app.client);
            sentMessagesToday.add(cacheKey);
          }
        }

        console.log(`‚≠ïÔ∏è (${new Date()}) ÏûêÎèô Î©îÏãúÏßÄ Î∞úÏÜ° ÏôÑÎ£å ‚≠ïÔ∏è`);
      } catch (error) {
        console.error(`‚ùå‚ùå‚ùå (${new Date()}) ÏûêÎèô Î©îÏãúÏßÄ Î∞úÏÜ° Ïã§Ìå®: ${error}`);
      }
    }
  );
}

// Slack Bolt Ïï± ÏãúÏûë
(async () => {
  try {
    console.log("Starting Slack Bolt app...");
    await app.start();
    console.log("‚ö°Ô∏è Bolt app is running!");

    // Ïã§Ï†ú Ïä§ÏºÄÏ§ÑÎßÅ
    scheduleDailyMessage();
  } catch (error) {
    console.error("Unable to start app:", error);
  }
})();
